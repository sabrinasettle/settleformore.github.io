{"expireTime":9007200868587479000,"key":"transformer-remark-markdown-ast-95a5e32cc08f56723ec747512be42969-gatsby-remark-giphygatsby-remark-instagram-embedgatsby-remark-responsive-iframe-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"So algorithms, fun right? Actually before this prep I found this part of Computer Science to be \"beyond\" me. I found it confusing and I thought I was too right brained to understand it.","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":186,"offset":186},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":186,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"But really I had people who were not experienced enough on the subject teach me these concepts. This means that I was missing key aspects.","position":{"start":{"line":4,"column":1,"offset":188},"end":{"line":4,"column":139,"offset":326},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":188},"end":{"line":4,"column":139,"offset":326},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"I wanna start by defining something important.","position":{"start":{"line":6,"column":1,"offset":328},"end":{"line":6,"column":47,"offset":374},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":328},"end":{"line":6,"column":47,"offset":374},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Algorithm","position":{"start":{"line":8,"column":5,"offset":380},"end":{"line":8,"column":14,"offset":389},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":376},"end":{"line":8,"column":14,"offset":389},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"/ˈalɡərɪð(ə)m/\n","position":{"start":{"line":9,"column":1,"offset":390},"end":{"line":10,"column":1,"offset":405},"indent":[1]}},{"type":"emphasis","children":[{"type":"text","value":"noun","position":{"start":{"line":10,"column":2,"offset":406},"end":{"line":10,"column":6,"offset":410},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":405},"end":{"line":10,"column":7,"offset":411},"indent":[]}},{"type":"text","value":"\na process or set of rules to be followed in calculations or other problem-solving operations, especially by a computer.","position":{"start":{"line":10,"column":7,"offset":411},"end":{"line":11,"column":120,"offset":531},"indent":[1]}}],"position":{"start":{"line":9,"column":1,"offset":390},"end":{"line":11,"column":120,"offset":531},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This means that a coding problem that asks you to find how many pages are in a chapter has an algorithm. Or a method to update users in a database has an algorithm.","position":{"start":{"line":13,"column":1,"offset":533},"end":{"line":13,"column":165,"offset":697},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":533},"end":{"line":13,"column":165,"offset":697},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's as simple as that. ","position":{"start":{"line":15,"column":1,"offset":699},"end":{"line":15,"column":25,"offset":723},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":699},"end":{"line":15,"column":25,"offset":723},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<a href=\"https://imgflip.com/i/4xn7wz\">","position":{"start":{"line":17,"column":1,"offset":725},"end":{"line":17,"column":40,"offset":764},"indent":[]}},{"type":"html","value":"<img src=\"https://i.imgflip.com/4xn7wz.jpg\" title=\"made at imgflip.com\"/>","position":{"start":{"line":17,"column":40,"offset":764},"end":{"line":17,"column":113,"offset":837},"indent":[]}},{"type":"html","value":"</a>","position":{"start":{"line":17,"column":113,"offset":837},"end":{"line":17,"column":117,"offset":841},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":725},"end":{"line":17,"column":117,"offset":841},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All this code is public and can be found at ","position":{"start":{"line":19,"column":1,"offset":843},"end":{"line":19,"column":45,"offset":887},"indent":[]}},{"type":"link","title":null,"url":"https://repl.it/@vbb123/Algorithms","children":[{"type":"text","value":"https://repl.it/@vbb123/Algorithms","position":{"start":{"line":19,"column":45,"offset":887},"end":{"line":19,"column":79,"offset":921},"indent":[]}}],"position":{"start":{"line":19,"column":45,"offset":887},"end":{"line":19,"column":79,"offset":921},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":19,"column":79,"offset":921},"end":{"line":19,"column":80,"offset":922},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":843},"end":{"line":19,"column":80,"offset":922},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Binary Search","position":{"start":{"line":21,"column":4,"offset":927},"end":{"line":21,"column":17,"offset":940},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":924},"end":{"line":21,"column":17,"offset":940},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This search only works on a previously sorted array. And the search happens by dividing the array in two (hence the \"binary\") by creating a left and a right of a \"mid\" or median. Using a target value that you are searching for the algorithm searches only one, left or right, for the target.","position":{"start":{"line":23,"column":1,"offset":942},"end":{"line":23,"column":291,"offset":1232},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":942},"end":{"line":23,"column":291,"offset":1232},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A very simple implentation would be:","position":{"start":{"line":25,"column":1,"offset":1234},"end":{"line":25,"column":37,"offset":1270},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":1234},"end":{"line":25,"column":37,"offset":1270},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"def binarySearch(arr, target)\n  arr.bsearch {|e| e <=> target}\nend","position":{"start":{"line":27,"column":1,"offset":1272},"end":{"line":31,"column":4,"offset":1346},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Breakdown:\nI used bsearch with a block with a spaceship operator.","position":{"start":{"line":32,"column":1,"offset":1347},"end":{"line":33,"column":55,"offset":1412},"indent":[1]}}],"position":{"start":{"line":32,"column":1,"offset":1347},"end":{"line":33,"column":55,"offset":1412},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A note about Spaceship Operators:\nUsed independently, it will return 1, 0, or -1 depending if the left value is greater than, equal or less than the value of the right.","position":{"start":{"line":35,"column":1,"offset":1414},"end":{"line":36,"column":135,"offset":1582},"indent":[1]}}],"position":{"start":{"line":35,"column":1,"offset":1414},"end":{"line":36,"column":135,"offset":1582},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"So heres a more complex version:","position":{"start":{"line":38,"column":1,"offset":1584},"end":{"line":38,"column":33,"offset":1616},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1584},"end":{"line":38,"column":33,"offset":1616},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"def binarySearch(arr, target)\n    left_most = 0\n    right_most = arr.length - 1\n  \n    while left_most <= right_most\n        mid = (left_most + right_most) / 2\n        # p \"value: #{arr[mid]} mid: #{mid}\"\n        if arr[mid] == target\n            return \"index of #{target} is #{mid}\"\n        elsif target > arr[mid]\n        # makes the right_most position one less than the mid \n            left_most = mid + 1\n        elsif target < arr[mid]\n            right_most = mid - 1\n        else\n            return \"#{target} isnt in the array\"\n        end\n    end\nend","position":{"start":{"line":40,"column":1,"offset":1618},"end":{"line":60,"column":4,"offset":2188},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Breakdown:","position":{"start":{"line":61,"column":1,"offset":2189},"end":{"line":61,"column":11,"offset":2199},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2189},"end":{"line":61,"column":11,"offset":2199},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"O notation","position":{"start":{"line":64,"column":5,"offset":2206},"end":{"line":64,"column":15,"offset":2216},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2202},"end":{"line":64,"column":15,"offset":2216},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Best","position":{"start":{"line":66,"column":3,"offset":2220},"end":{"line":66,"column":7,"offset":2224},"indent":[]}}],"position":{"start":{"line":66,"column":3,"offset":2220},"end":{"line":66,"column":7,"offset":2224},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2218},"end":{"line":66,"column":7,"offset":2224},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Worst","position":{"start":{"line":67,"column":3,"offset":2227},"end":{"line":67,"column":8,"offset":2232},"indent":[]}}],"position":{"start":{"line":67,"column":3,"offset":2227},"end":{"line":67,"column":8,"offset":2232},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2225},"end":{"line":67,"column":8,"offset":2232},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Average?","position":{"start":{"line":68,"column":3,"offset":2235},"end":{"line":68,"column":11,"offset":2243},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":2235},"end":{"line":68,"column":11,"offset":2243},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2233},"end":{"line":68,"column":11,"offset":2243},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2218},"end":{"line":68,"column":11,"offset":2243},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Quick Sort","position":{"start":{"line":70,"column":4,"offset":2248},"end":{"line":70,"column":14,"offset":2258},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2245},"end":{"line":70,"column":14,"offset":2258},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"def quicksort(*arr)\n    # edge case\n    return arr if arr.length <= 1\n\n    # find the pivot\n    pivot = arr.delete_at(rand(arr.size))\n    left, right = arr.partition {|x| x < pivot}\n    return *quicksort(*left), pivot, *quicksort(*right)\nend","position":{"start":{"line":71,"column":1,"offset":2259},"end":{"line":81,"column":4,"offset":2508},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Breakdown:","position":{"start":{"line":83,"column":1,"offset":2510},"end":{"line":83,"column":11,"offset":2520},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":2510},"end":{"line":83,"column":11,"offset":2520},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"    *arr","position":{"start":{"line":84,"column":1,"offset":2521},"end":{"line":86,"column":4,"offset":2537},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This parameter opens the method to using multiple parameters without defining the specific parameters.","position":{"start":{"line":87,"column":1,"offset":2538},"end":{"line":87,"column":103,"offset":2640},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2538},"end":{"line":87,"column":103,"offset":2640},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"    pivot = arr.delete_at(rand(arr.size))","position":{"start":{"line":89,"column":1,"offset":2642},"end":{"line":91,"column":4,"offset":2691},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Quicksort relies on a pivot, which can be chosen 3 ways: ","position":{"start":{"line":92,"column":1,"offset":2692},"end":{"line":92,"column":58,"offset":2749},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2692},"end":{"line":92,"column":58,"offset":2749},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Completely random (which is the way I use)","position":{"start":{"line":93,"column":4,"offset":2753},"end":{"line":93,"column":46,"offset":2795},"indent":[]}}],"position":{"start":{"line":93,"column":4,"offset":2753},"end":{"line":93,"column":46,"offset":2795},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2750},"end":{"line":93,"column":46,"offset":2795},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Choosing a \"median of three\", three random elements from the array. Then pick a median of those three. This alternative provides a more exact median for the main array.","position":{"start":{"line":94,"column":4,"offset":2799},"end":{"line":94,"column":172,"offset":2967},"indent":[]}}],"position":{"start":{"line":94,"column":4,"offset":2799},"end":{"line":94,"column":172,"offset":2967},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2796},"end":{"line":94,"column":172,"offset":2967},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Choose the last element in the array.","position":{"start":{"line":95,"column":4,"offset":2971},"end":{"line":95,"column":41,"offset":3008},"indent":[]}}],"position":{"start":{"line":95,"column":4,"offset":2971},"end":{"line":95,"column":41,"offset":3008},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2968},"end":{"line":95,"column":41,"offset":3008},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2750},"end":{"line":95,"column":41,"offset":3008},"indent":[1,1]}},{"type":"code","lang":null,"meta":null,"value":"    left, right = arr.partition {|x| x < pivot}","position":{"start":{"line":97,"column":1,"offset":3010},"end":{"line":99,"column":4,"offset":3065},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"I used the Enumerable#partition, and should make my own partition method in future to understand it better. ","position":{"start":{"line":101,"column":1,"offset":3067},"end":{"line":101,"column":109,"offset":3175},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":3067},"end":{"line":101,"column":109,"offset":3175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It separates the given array by if the element is less than the pivot into left and right ","position":{"start":{"line":103,"column":1,"offset":3177},"end":{"line":103,"column":91,"offset":3267},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":3177},"end":{"line":103,"column":91,"offset":3267},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"    return *quicksort(*left), pivot, *quicksort(*right)","position":{"start":{"line":105,"column":1,"offset":3269},"end":{"line":107,"column":4,"offset":3332},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is the recrusive part of the algorithm. We have the function twice for both left and right as part of the return.","position":{"start":{"line":108,"column":1,"offset":3333},"end":{"line":108,"column":119,"offset":3451},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":3333},"end":{"line":108,"column":119,"offset":3451},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"O notation","position":{"start":{"line":110,"column":5,"offset":3457},"end":{"line":110,"column":15,"offset":3467},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":3453},"end":{"line":110,"column":15,"offset":3467},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Best - O(n log n)","position":{"start":{"line":112,"column":3,"offset":3471},"end":{"line":112,"column":20,"offset":3488},"indent":[]}}],"position":{"start":{"line":112,"column":3,"offset":3471},"end":{"line":112,"column":20,"offset":3488},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3469},"end":{"line":112,"column":20,"offset":3488},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Worst - O(n²)","position":{"start":{"line":113,"column":3,"offset":3491},"end":{"line":113,"column":16,"offset":3504},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":3491},"end":{"line":113,"column":16,"offset":3504},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3489},"end":{"line":113,"column":16,"offset":3504},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3469},"end":{"line":113,"column":16,"offset":3504},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Merge Sort","position":{"start":{"line":115,"column":4,"offset":3509},"end":{"line":115,"column":14,"offset":3519},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3506},"end":{"line":115,"column":14,"offset":3519},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A very simple implentation would be:","position":{"start":{"line":117,"column":1,"offset":3521},"end":{"line":117,"column":37,"offset":3557},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":3521},"end":{"line":117,"column":37,"offset":3557},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"    arr.sort!","position":{"start":{"line":119,"column":1,"offset":3559},"end":{"line":121,"column":4,"offset":3580},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"But that doesn't teach you anything because the Ruby functions hide what happens behind the scenes.","position":{"start":{"line":123,"column":1,"offset":3582},"end":{"line":123,"column":100,"offset":3681},"indent":[]}}],"position":{"start":{"line":123,"column":1,"offset":3582},"end":{"line":123,"column":100,"offset":3681},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"So we take a hints from the Binary Search and Quick Sort and we will divide the array and then recursively sort the array.","position":{"start":{"line":125,"column":1,"offset":3683},"end":{"line":125,"column":123,"offset":3805},"indent":[]}}],"position":{"start":{"line":125,"column":1,"offset":3683},"end":{"line":125,"column":123,"offset":3805},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"def mergeSort(arr)\n  return arr if arr.size <= 1\n  mid = (arr.size.to_f / 2).ceil\n  # seprates the arr into two distict arrays\n  # iterates through with the decrese on mid in the left array\n  # also the recrusion\n  left = mergeSort(arr[0..mid - 1])\n  right = mergeSort(arr[mid..arr.size])\n  merge(left, right)\nend\n\ndef merge(left, right)\n  left_last = left.size\n  right_last = right.size\n  if left.empty?\n    right\n  elsif right.empty?\n    left\n  elsif left.first < right.first\n    # new small Array\n    sa = [left.first]\n    sa + merge(left[1..left_last], right)\n  else\n    sa = [right.first]\n    sa + merge(left, right[1..right_last])\n  end\nend","position":{"start":{"line":127,"column":1,"offset":3807},"end":{"line":155,"column":4,"offset":4461},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Breakdown: ","position":{"start":{"line":157,"column":1,"offset":4463},"end":{"line":157,"column":12,"offset":4474},"indent":[]}}],"position":{"start":{"line":157,"column":1,"offset":4463},"end":{"line":157,"column":12,"offset":4474},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Taking an array,","position":{"start":{"line":159,"column":1,"offset":4476},"end":{"line":159,"column":17,"offset":4492},"indent":[]}}],"position":{"start":{"line":159,"column":1,"offset":4476},"end":{"line":159,"column":17,"offset":4492},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"    arr = [2, 3, 5, 4, 1]","position":{"start":{"line":160,"column":1,"offset":4493},"end":{"line":162,"column":4,"offset":4526},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first method: ","position":{"start":{"line":164,"column":1,"offset":4528},"end":{"line":164,"column":19,"offset":4546},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":4528},"end":{"line":164,"column":19,"offset":4546},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"def mergeSort(arr)\n  return arr if arr.size <= 1\n  mid = (arr.size.to_f / 2).ceil\n  # seprates the arr into two distict arrays\n  # iterates through with the decrese on mid in the left array\n  # also the recrusion\n  left = mergeSort(arr[0..mid - 1])\n  right = mergeSort(arr[mid..arr.size])\n  merge(left, right)\nend","position":{"start":{"line":166,"column":1,"offset":4548},"end":{"line":177,"column":4,"offset":4869},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In this method we get a mid/pivot position and then split the array by that point creating a left and right.","position":{"start":{"line":179,"column":1,"offset":4871},"end":{"line":179,"column":109,"offset":4979},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4871},"end":{"line":179,"column":109,"offset":4979},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"this would look like:","position":{"start":{"line":181,"column":1,"offset":4981},"end":{"line":181,"column":22,"offset":5002},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":4981},"end":{"line":181,"column":22,"offset":5002},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"    # mid = 3\n    # and left looks like:\n    # [2, 3, 5]\n    # and right looks like:\n    # [1, 4]\n\n    # but because of recrusion it goes:\n    # L: [2], R: [3]\n    # L :[2, 3], R: [5]\n    # L: [2, 3, 5], R: [4]\n    # L: [1], R: [4]\n\n    # and mid continues like this:\n    # 2\n    # 1\n    # 1","position":{"start":{"line":183,"column":1,"offset":5004},"end":{"line":200,"column":4,"offset":5303},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This left/right array combo gets handed to merge which also has recrusion.","position":{"start":{"line":202,"column":1,"offset":5305},"end":{"line":202,"column":75,"offset":5379},"indent":[]}}],"position":{"start":{"line":202,"column":1,"offset":5305},"end":{"line":202,"column":75,"offset":5379},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"def merge(left, right)\n  left_last = left.size\n  right_last = right.size\n  if left.empty?\n    right\n  elsif right.empty?\n    left\n  elsif left.first < right.first\n    # new small Array\n    sa = [left.first]\n    sa + merge(left[1..left_last], right)\n  elsif left.first > right.first\n    sa = [right.first]\n    sa + merge(left, right[1..right_last])\n  end\nend","position":{"start":{"line":204,"column":1,"offset":5381},"end":{"line":221,"column":4,"offset":5746},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This method decreases the array on the recrusive call, based off the comparsion if whether the ","position":{"start":{"line":223,"column":1,"offset":5748},"end":{"line":223,"column":96,"offset":5843},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":5748},"end":{"line":223,"column":96,"offset":5843},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"    # the order of left and right as input come in as:\n    # [2], [3]\n    # [], [3]\n    # [2, 3], [5]\n    # [3], [5]\n    # [], [5]\n    # [4], [1]\n    # [4], []\n    # [2, 3, 5], [1, 4]\n    # [2, 3, 5], [4]\n    # [3, 5], [4]\n    # [5], [4]\n    # [5], [] ","position":{"start":{"line":225,"column":1,"offset":5845},"end":{"line":240,"column":4,"offset":6106},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"O notation","position":{"start":{"line":242,"column":5,"offset":6113},"end":{"line":242,"column":15,"offset":6123},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":6109},"end":{"line":242,"column":15,"offset":6123},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Best - O(n log n)","position":{"start":{"line":244,"column":3,"offset":6127},"end":{"line":244,"column":20,"offset":6144},"indent":[]}}],"position":{"start":{"line":244,"column":3,"offset":6127},"end":{"line":244,"column":20,"offset":6144},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":6125},"end":{"line":244,"column":20,"offset":6144},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Worst - O(n log n)","position":{"start":{"line":245,"column":3,"offset":6147},"end":{"line":245,"column":21,"offset":6165},"indent":[]}}],"position":{"start":{"line":245,"column":3,"offset":6147},"end":{"line":245,"column":21,"offset":6165},"indent":[]}}],"position":{"start":{"line":245,"column":1,"offset":6145},"end":{"line":245,"column":21,"offset":6165},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":6125},"end":{"line":245,"column":21,"offset":6165},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Resources","position":{"start":{"line":249,"column":4,"offset":6172},"end":{"line":249,"column":13,"offset":6181},"indent":[]}}],"position":{"start":{"line":249,"column":1,"offset":6169},"end":{"line":249,"column":13,"offset":6181},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://hired.com/blog/candidates/technical-onsite-interview-guide/?utm_source=customerio&utm_medium=email&utm_campaign=(b2c)(en_7_master)(c_rejected_SWE-nurture","children":[{"type":"text","value":"https://hired.com/blog/candidates/technical-onsite-interview-guide/?utm_source=customerio&utm_medium=email&utm_campaign=(b2c)(en_7_master)(c_rejected_SWE-nurture","position":{"start":{"line":251,"column":1,"offset":6183},"end":{"line":251,"column":162,"offset":6344},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":6183},"end":{"line":251,"column":162,"offset":6344},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":251,"column":162,"offset":6344},"end":{"line":251,"column":163,"offset":6345},"indent":[]}}],"position":{"start":{"line":251,"column":1,"offset":6183},"end":{"line":251,"column":163,"offset":6345},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://hired.com/blog/candidates/5-ways-to-stand-out-during-your-next-technical-interview/?utm_source=customerio&utm_medium=email&utm_campaign=(b2c)(en_7_master)(c_rejected_SWE-nurture","children":[{"type":"text","value":"https://hired.com/blog/candidates/5-ways-to-stand-out-during-your-next-technical-interview/?utm_source=customerio&utm_medium=email&utm_campaign=(b2c)(en_7_master)(c_rejected_SWE-nurture","position":{"start":{"line":253,"column":1,"offset":6347},"end":{"line":253,"column":186,"offset":6532},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":6347},"end":{"line":253,"column":186,"offset":6532},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":253,"column":186,"offset":6532},"end":{"line":253,"column":187,"offset":6533},"indent":[]}}],"position":{"start":{"line":253,"column":1,"offset":6347},"end":{"line":253,"column":187,"offset":6533},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.quora.com/What-should-I-expect-in-a-Software-Engineer-interview-at-Google-and-how-should-I-prepare/answer/Moishe-Lettvin?srid=unsVg","children":[{"type":"text","value":"https://www.quora.com/What-should-I-expect-in-a-Software-Engineer-interview-at-Google-and-how-should-I-prepare/answer/Moishe-Lettvin?srid=unsVg","position":{"start":{"line":255,"column":1,"offset":6535},"end":{"line":255,"column":144,"offset":6678},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":6535},"end":{"line":255,"column":144,"offset":6678},"indent":[]}}],"position":{"start":{"line":255,"column":1,"offset":6535},"end":{"line":255,"column":144,"offset":6678},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://coderwall.com/p/qfh2ua/ruby-tricks-to-make-your-code-more-fun-and-less-readable","children":[{"type":"text","value":"https://coderwall.com/p/qfh2ua/ruby-tricks-to-make-your-code-more-fun-and-less-readable","position":{"start":{"line":258,"column":1,"offset":6681},"end":{"line":258,"column":88,"offset":6768},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":6681},"end":{"line":258,"column":88,"offset":6768},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":6681},"end":{"line":258,"column":88,"offset":6768},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://coderwall.com/p/vue87q/ruby-operators-names-aliases-and-uses","children":[{"type":"text","value":"https://coderwall.com/p/vue87q/ruby-operators-names-aliases-and-uses","position":{"start":{"line":260,"column":1,"offset":6770},"end":{"line":260,"column":69,"offset":6838},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":6770},"end":{"line":260,"column":69,"offset":6838},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":6770},"end":{"line":260,"column":69,"offset":6838},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.rubydoc.info/stdlib/core/Array:bsearch","children":[{"type":"text","value":"https://www.rubydoc.info/stdlib/core/Array:bsearch","position":{"start":{"line":262,"column":1,"offset":6840},"end":{"line":262,"column":51,"offset":6890},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":6840},"end":{"line":262,"column":51,"offset":6890},"indent":[]}}],"position":{"start":{"line":262,"column":1,"offset":6840},"end":{"line":262,"column":51,"offset":6890},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://apidock.com/ruby/Enumerable/partition","children":[{"type":"text","value":"https://apidock.com/ruby/Enumerable/partition","position":{"start":{"line":264,"column":1,"offset":6892},"end":{"line":264,"column":46,"offset":6937},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":6892},"end":{"line":264,"column":46,"offset":6937},"indent":[]}}],"position":{"start":{"line":264,"column":1,"offset":6892},"end":{"line":264,"column":46,"offset":6937},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Code Snippets that helped","position":{"start":{"line":267,"column":5,"offset":6944},"end":{"line":267,"column":30,"offset":6969},"indent":[]}}],"position":{"start":{"line":267,"column":1,"offset":6940},"end":{"line":267,"column":30,"offset":6969},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://gist.github.com/JonathanSpeek/225cd0c05f66ffdd4f52bef77135881a","children":[{"type":"text","value":"https://gist.github.com/JonathanSpeek/225cd0c05f66ffdd4f52bef77135881a","position":{"start":{"line":268,"column":1,"offset":6970},"end":{"line":268,"column":71,"offset":7040},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":6970},"end":{"line":268,"column":71,"offset":7040},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":6970},"end":{"line":268,"column":71,"offset":7040},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stackoverflow.com/questions/32210399/binary-search-ruby","children":[{"type":"text","value":"https://stackoverflow.com/questions/32210399/binary-search-ruby","position":{"start":{"line":270,"column":1,"offset":7042},"end":{"line":270,"column":64,"offset":7105},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":7042},"end":{"line":270,"column":64,"offset":7105},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":7042},"end":{"line":270,"column":64,"offset":7105},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://stackoverflow.com/questions/65461890/in-ruby-is-it-better-to-receive-array-or-to-duplicate-and-array-inside-a-metho","children":[{"type":"text","value":"https://stackoverflow.com/questions/65461890/in-ruby-is-it-better-to-receive-array-or-to-duplicate-and-array-inside-a-metho","position":{"start":{"line":272,"column":1,"offset":7107},"end":{"line":272,"column":124,"offset":7230},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":7107},"end":{"line":272,"column":124,"offset":7230},"indent":[]}}],"position":{"start":{"line":272,"column":1,"offset":7107},"end":{"line":272,"column":124,"offset":7230},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":272,"column":124,"offset":7230}}}}