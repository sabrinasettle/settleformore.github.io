{"version":3,"sources":["webpack:///./src/components/blog/tags/tag-button.js","webpack:///./src/components/blog/tags/tag-grid.js","webpack:///./src/components/blog/tags/tag-section.js","webpack:///./src/components/blog/posts-section.js","webpack:///./src/pages/blog.js"],"names":["TagButton","props","tag","selected","className","class","TagGrid","tags","React","useState","chosenTags","state","setState","clearTagFilters","response","addTagFilters","addFiltersToState","e","text","target","textContent","includes","i","indexOf","splice","length","push","buttonArray","forEach","id","createButtonArray","map","button","index","key","onClick","TagSection","setFilters","PostsSection","posts","filterTags","frontmatter","to","path","title","sort","BlogIndex","nodes","data","allMdx","filters","tagList","nodeData","Set","getAllTags","useEffect","list","filterPosts","filteredPosts","node","some","r"],"mappings":"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","file":"component---src-pages-blog-js-43ef1e94b31eefff6c35.js","sourcesContent":["import React from 'react'\n\n// inherit props\nconst TagButton = (props) => {\n    const tag = props.tag;\n    const selected = props.selected;\n    \n    return(\n        <div className=\"button-container\">\n            <div className={props.class} >{tag}</div>\n        </div>\n    )\n}\n\nexport default TagButton;","import React from 'react'\nimport TagButton from './tag-button'\n\n// https://stackoverflow.com/questions/48131100/react-render-array-of-components\nconst TagGrid = (props) => {\n    const tags = props.tags;\n    const [state, setState] = React.useState({\n        chosenTags: [],\n    })\n\n    // create array of buttons with props\n    const createButtonArray = () => {\n        let buttonArray = [];\n\n        tags.forEach(tag => {\n            if (state.chosenTags.includes(tag)) {\n                buttonArray.push(<TagButton id={tag} tag={tag} class={\"tag-button-selected\"}/>)\n            } else {\n                buttonArray.push(<TagButton id={tag} tag={tag} selected={false} class={\"tag-button\"}/>)\n            }\n        })\n\n        if (state.chosenTags.length !== 0 ){\n            buttonArray.push(<TagButton id=\"clear\" tag=\"clear\" class={\"tag-button\"} />)\n        }\n\n        return buttonArray;\n    }\n\n    const clearTagFilters = () => {\n        setState({...state, chosenTags: []})\n        props.response([]);\n    }\n\n    const addTagFilters = (tags) => {\n        setState({...state, chosenTags: tags})\n        props.response(state.chosenTags)\n    }\n\n    const addFiltersToState = (e) => {\n        // console.log(\"test\", e.target.textContent);\n        const text = e.target.textContent;\n        const tags = state.chosenTags;\n        if (text === \"clear\") {\n            clearTagFilters();\n        } else {\n            if (tags.includes(text)) {\n                let i = tags.indexOf(text)\n                tags.splice(i, 1);\n                if (tags.length === 0) {\n                    clearTagFilters();\n                } else {\n                    addTagFilters(tags);\n                }\n            } else {\n                tags.push(text)\n                addTagFilters(tags);\n            }\n        }\n    }\n\n    const buttonArray = createButtonArray();\n    return(\n        <div id=\"tag-button-grid\">\n            {buttonArray.map((button, index) => (\n                <span key={index} onClick={addFiltersToState}>\n                    {button}\n                </span>\n            ))}\n        </div>\n    )\n}\n\nexport default TagGrid;","import React from 'react'\nimport TagGrid from './tag-grid'\n\nconst TagSection = (props) => {\n    const tags = props.tags\n\n    // const sendState = (filters) => {\n    //     props.setFilters(filters);\n    // }\n    \n    return(\n        <div id=\"tag-section\">\n            <h2>Tags</h2>\n            <TagGrid tags={tags} response={props.setFilters} />\n        </div>\n    )\n}\n\nexport default TagSection;","import React from 'react';\nimport { Link } from 'gatsby';\nimport { useEffect, useRef } from 'react';\n\nconst PostsSection = (props) => {\n    const posts = props.posts\n    const filters = props.filterTags;\n    \n    return (\n        <ul id=\"blog-posts\">\n        {props.posts.map(({ id, frontmatter}) => {\n          return (\n            <li className=\"article-list\" key={id}>\n              <Link to={frontmatter.path}>{frontmatter.title}</Link>\n              <ul className=\"tag-list\">\n                {frontmatter.tags.sort().map(tag => {\n                  return <li className=\"tag\" key={tag + id}>{tag}</li>\n                })}\n              </ul>\n            </li>\n          )\n        })}\n      </ul>\n    )\n\n}\n\nexport default PostsSection;","import React, {useState, useEffect} from \"react\"\nimport Layout from \"../components/layout.js\"\nimport { graphql } from 'gatsby';\nimport TagSection from '../components/blog/tags/tag-section'\n// import SEO from 'react-seo-component';\n\nimport \"../styles/blog.scss\"\nimport \"../styles/index.scss\"\nimport PostsSection from \"../components/blog/posts-section.js\";\n\nexport default function BlogIndex ({ data }) {\n  const nodes = data.allMdx.nodes\n  \n  const [state, setState] = useState({\n    posts: nodes,\n    filters: [],\n  })\n\n  const getAllTags = (nodes) => {\n    let tagList = [];\n    nodes.map(nodeData => {\n      let articleTags = nodeData.frontmatter.tags\n      return articleTags.map(tags => (\n        tagList.push(tags)\n      ))\n    })\n    let uniqTags = new Set(tagList)\n    return uniqTags;\n  }\n\n  const tags = getAllTags(nodes);\n\n  useEffect(() => {\n    let list;\n    if (state.filters.length !== 0) {\n      list = filterPosts();\n      // console.log(\"blog post list\", list, list.length);\n    } else {\n      list = nodes;\n      // console.log(\"blog post list\", list, list.length);\n    }\n    setState({...state, posts: list})\n  }, [state.filters])\n\n  const setFilters = (filters) => {\n    // console.log(\"setting filters\", filters, filters.length);\n    setState({...state, filters: filters});\n  }\n\n  // tweak the filtering so that if webdevelopment is chosen that can be filtered by algo\n  const filterPosts = () => {\n    let filteredPosts = [];\n    let list = nodes;\n    list.map(node => {\n      let postTags = node.frontmatter.tags;\n      if (postTags.some(r => state.filters.includes(r))) {\n          filteredPosts.push(node)\n      }\n    })\n    return filteredPosts;\n  }\n\n  return (\n    <Layout>\n      <h1 className=\"page-header\">\n      </h1>\n      <h2 className=\"page-sub-header\"> \n        I write about fullstack web development sprinkled with my favorite popular (even unpopular) cultural references\n      </h2>\n      <TagSection tags={tags} setFilters={setFilters} />\n      <PostsSection posts={state.posts} filterTags={state.filters} />\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query blogIndex {\n    allMdx(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { published: { eq: true } } }      \n      ) {\n        nodes {\n          id\n          frontmatter {\n            title\n            path\n            tags\n          }\n      }\n    }\n  }\n`\n\n// query MyQuery {\n//   allMdx {\n//     group(field: frontmatter___tags) {\n//       tag: fieldValue\n//       totalCount\n//     }\n//   }\n// }\n\n\n/// query from \n// export const PageQuery = graphql`\n//     query {\n//         site {\n//             siteMetadata {\n//                 title\n//             }\n//         }\n//         allMarkdownRemark(limit: 2000) {\n//             group(field: frontmatter___tags) {\n//                 fieldValue\n//                 totalCount\n//             }\n//         }\n//     }\n// `"],"sourceRoot":""}